type Query {
    users(input: UsersInput!): UsersResult
    user(input: UserInput!): UserResult

    yeets(input: YeetsInput!): YeetsResult
    yeet(input: YeetInput!): YeetResult
    feed(input: FeedInput!): FeedResult
    yomments(input: YommentsInput!): YommentsResult
    yomment(input: YommentInput!): YommentResult

    tags(input: TagsInput!): TagsResult
    tag(input: TagInput!): TagResult
}

type Mutation {
    registration(input: RegistrationInput!): RegistrationPayload!
    login(input: LoginInput!): LoginPayload!
    addFollow(input: AddFollowInput!): AddFollowPayload!
    removeFollow(input: RemoveFollowInput!): RemoveFollowPayload!

    createYeet(input: CreateYeetInput!): CreateYeetPayload!
    deleteYeet(input: DeleteYeetInput!): DeleteYeetPayload! # also deletes all yomments
    createYomment(input: CreateYommentInput!): CreateYommentPayload!
    deleteYomment(input: DeleteYommentInput!): DeleteYommentPayload!

    createTag(input: CreateTagInput!): CreateTagPayload!
}

# Query

enum SortDirection {
    ASC
    DSC
}

type UserInfo {
    id: Int!
    username: String!
    firstName: String!
    lastName: String!
}

type User {
    id: Int!
    username: String!
    firstName: String!
    lastName: String!
    passwordHash: String! # wirklich notwendig? Frontend brauchts nicht
    followerCount: Int!
    followingCount: Int!
    follower: [UserInfo!]!
    following: [UserInfo!]!
}

input UserInput {
    userId: Int!
}

type UserResult {
    Result: User!
}

input UsersInput {
    limit: Int!
    offset: Int!
    sorting: SortUsers!
    direction: SortDirection = ASC
    filter: String # nach usernamen filtern
}

type UsersResult {
    Result: [User!]!
    count: Int!
}

enum SortUsers {
    ID
    USERNAME
    FIRST_NAME
    LAST_NAME
    FOLLOWER
}

scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

type Yeet {
    id: Int!
    title: String!
    body: String!
    tags: [Tag!]!
    likes: Int! # Count likes
    createdAt: DateTime!
    userId: Int!
    user: User!
    yomments: [Yomment!]! # also known as Comments
}

input YeetInput {
    yeetId: Int!
}

type YeetResult {
    Result: Yeet!
}

input YeetsInput {
    limit: Int!
    offset: Int!
    sorting: SortYeets!
    direction: SortDirection = ASC
    filter: String # nach title filtern
    tags: [Int!]
}

type YeetsResult {
    Result: [Yeet!]!
    count: Int!
}

input FeedInput {
    userId: Int!
    limit: Int!
    offset: Int!
}

type FeedResult {
    Result: [Yeet!]!
    count: Int!
}

enum SortYeets {
    ID
    TITLE
    CREATED_AT
    LIKES
    TAG # name
}

type Yomment {
    id: Int!
    body: String!
    likes: Int!
    createdAt: DateTime!
    yeetId: Int!
    userId: Int!
    user: User!
}

input YommentInput {
    yommentId: Int!
}

type YommentResult {
    Result: Yomment!
}

input YommentsInput {
    yeetId: Int!
    limit: Int!
    offset: Int!
    sorting: SortYomments!
    direction: SortDirection = ASC
}

type YommentsResult {
    Result: [Yomment!]!
    count: Int!
}

enum SortYomments {
    ID
    CREATED_AT
    LIKES
}

type Tag {
    id: Int!
    name: String!
}

input TagInput {
    tagId: Int!
}

type TagResult {
    Result: Tag!
}

input TagsInput {
    limit: Int!
    offset: Int!
    sorting: SortTags!
    direction: SortDirection = ASC
    filter: String # nach name filtern
}

type TagsResult {
    Result: [Tag!]!
    count: Int!
}

enum SortTags {
    ID
    NAME
}

# Mutation

input RegistrationInput {
    username: String!
    firstName: String!
    lastName: String!
    password: String!
}

type RegistrationResult {
    token: String
    user: User
}

input LoginInput {
    username: String!
    password: String!
}

type LoginResult {
    token: String
    user: User
}

input AddFollowInput {
    userId: Int!
    followingId: Int!
}

type AddFollowResult {
    newFollowingCount: Int! # von Follower
    newFollowerCount: Int! # von Following
}

input RemoveFollowInput {
    userId: Int!
    followingId: Int!
}

type RemoveFollowResult {
    newFollowingCount: Int! # von Follower
    newFollowerCount: Int! # von Following
}

input CreateYeetInput {
    userId: Int!
    title: String!
    body: String!
    tags: [Int!]
}

type CreateYeetResult {
    yeet: Yeet
}

input DeleteYeetInput {
    yeetId: Int!
}

type DeleteYeetResult {
    int: Int
}

input CreateYommentInput {
    yeetId: Int!
    body: String!
    userId: Int!
}

type CreateYommentResult {
    yeet: Yeet
    yomment: Yomment
    yomments: [Yomment!]!
}

input DeleteYommentInput {
    yommentId: Int!
}

type DeleteYommentResult {
    yeet: Yeet
    yomments: [Yomment!]!
}

input CreateTagInput {
    name: String!
}

type CreateTagResult {
    tag: Tag
    tags: [Tag!]!
}

# Error

interface Error {
    message: String!
}

type UsernameAlreadyExistsError implements Error {
    message: String!
}

type PasswordTooShortError implements Error {
    message: String!
}

type UserNotFoundError implements Error {
    message: String!
}

type InvalidPasswordError implements Error {
    message: String!
}

type FollowingNotFoundError implements Error {
    message: String!
}

type TagNotFoundError implements Error {
    message: String!
}

type YeetNotFoundError implements Error {
    message: String!
}

type YommentNotFoundError implements Error {
    message: String!
}

type TagAlreadyExistsError implements Error {
    message: String!
}

# Payload

union RegistrationError = UsernameAlreadyTakenError | PasswordTooShortError

type RegistrationPayload {
    registrationResult: RegistrationResult!
    errors: [RegistrationError!]
}

union LoginError = UserNotFoundError | InvalidPasswordError

type LoginPayload {
    loginResult: LoginResult!
    errors: [LoginError!]
}

union AddFollowError = UserNotFoundError | FollowingNotFoundError

type AddFollowPayload {
    addFollowResult: AddFollowResult!
    errors: [AddFollowError!]
}

union RemoveFollowError = UserNotFoundError | FollowingNotFoundError

type RemoveFollowPayload {
    removeFollowResult: RemoveFollowResult!
    errors: [RemoveFollowError!]
}

union CreateYeetError = UserNotFoundError | TagNotFoundError

type CreateYeetPayload {
    createYeetResult: CreateYeetResult!
    errors: [CreateYeetError!]
}

union DeleteYeetError = YeetNotFoundError

type DeleteYeetPayload {
    deleteYeetResult: DeleteYeetResult!
    errors: [DeleteYeetError!]
}

union CreateYommentError = YeetNotFoundError | UserNotFoundError

type CreateYommentPayload {
    createYommentResult: CreateYommentResult!
    errors: [CreateYommentError!]
}

union DeleteYommentError = YommentNotFoundError

type DeleteYommentPayload {
    deleteYommentResult: DeleteYommentResult!
    errors: [DeleteYommentError!]
}

union CreateTagError = TagAlreadyExists

type CreateTagPayload {
    createTagResult: CreateTagResult!
    errors: [CreateTagError!]
}
